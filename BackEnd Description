________________________________________
models/ â€“ Database Schemas (Mongoose)
This folder holds the schema definitions that define the structure of the MongoDB collections using Mongoose.
ðŸ”¹ User.js
â€¢	Defines how a user is stored in MongoDB.
â€¢	Common fields:
â€¢	Used for login, registration, and role-based access control.
ðŸ”¹ Subject.js
â€¢	Represents a course or subject (like "Math", "Chemistry").
â€¢	Typical fields:
________________________________________
routes/ â€“ API Endpoints
This folder maps HTTP requests to controller functions.
ðŸ”¹ authRoutes.js
â€¢	Handles:
o	POST /api/auth/register â€“ Register new users.
o	POST /api/auth/login â€“ Authenticate users and return a JWT token.
ðŸ”¹ subjectRoutes.js
â€¢	Handles subject-related endpoints:
o	GET /api/subjects â€“ Fetch all subjects.
o	POST /api/subjects â€“ Add new subject (admin or teacher only).
o	Can later be extended to update or delete subjects.
ðŸ”¹ protected.js
â€¢	Example of a protected route that requires users to be authenticated.
â€¢	Typically checks the JWT from the frontend to validate access.
â€¢	Useful for dashboards, uploading materials, etc.
________________________________________
 controllers/ â€“ Business Logic Layer
Instead of writing all logic inside route files, controllers handle the actual logic and keep routes clean.
ðŸ”¹ authController.js (common content)
â€¢	register() â€“ Checks if a user exists, hashes password, saves user to DB.
â€¢	login() â€“ Verifies username/password, returns a JWT.
â€¢	JWT allows frontend to make authenticated requests (like /api/subjects).
________________________________________
middleware/ â€“ Reusable Authentication Helpers
Middleware functions are run before your routes.
ðŸ”¹ authMiddleware.js
â€¢	Checks if the Authorization header contains a valid JWT token.
â€¢	Decodes token and attaches user info (req.user = decoded) so that protected routes can access it.
________________________________________
public/ â€“ Frontend Files (Static Assets)
This is where the user interface lives, served directly by Express using app.use(express.static("public")).
ðŸ”¹ LoginPage.html
â€¢	Page for login and sign-up.
â€¢	Has JS scripts that use fetch() to hit your /api/auth/login and /api/auth/register endpoints.
ðŸ”¹ course.html, Home Page.html
â€¢	Pages that might show different content based on user roles.
â€¢	Can make fetch() calls to your backend to load course info, etc.
ðŸ”¹ login.js
â€¢	Handles JS logic for login and registration using:
â€¢	Stores JWT token in localStorage after login so it can be used for authenticated requests.
________________________________________
 server.js â€” The Entry Point of the Backend
The starting point of the backend application. It sets up the Express server, connects to MongoDB, handles middleware, and maps API routes.
This file sets up:
â€¢	Environment variables (dotenv.config())
â€¢	Database connection (mongoose.connect(...))
â€¢	Middleware (cors, express.json, static files)
â€¢	API routing (/api/auth, /api/subjects)
â€¢	Port listening
________________________________________
.env â€“ Environment Configuration
Holds secrets and connection strings like:

PORT=5000
MONGO_URI=mongodb+srv://user:pass@cluster.mongodb.net/test
JWT_SECRET=somerandomstring
________________________________________
How It All Works Together:
1.	Frontend user fills in login or registration.
2.	Frontend JS uses fetch() to POST data to backend (/api/auth/...).
3.	Backend (authRoutes) processes request, returns JWT on success.
4.	Frontend stores JWT in localStorage.
5.	Frontend makes secure requests using Authorization: Bearer <token> to access protected content (e.g., subjects, courses).
6.	Backend checks token with middleware before giving access.

